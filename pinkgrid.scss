$defaultcols: 12; 
$defaultpad: 1%;

* {
	box-sizing: border-box;
}

/* 	PINK GRID
* 	Sass Width Percentage Generator
*
*	$align:			Vertical-align property 													Defaults to Top
* 	$totalcols: 	Number of columns in your grid ( ex: 12 ) 									Defaults to $defaultcols
* 	$colspan: 		Number of columns your item spans ( ex: 3 / 12 ) 							Defaults to $defaultcols (100% width)
*	$padside:		If $autopad is false, it will use this value to manually add side padding. 	Defaults to $defaultpad
*	$padtop:		Percentage padding above/below around each item. 							Defaults to 0
*			
*/

@mixin pinkgrid( $align: top, $totalcols: $defaultcols, $colspan: $defaultcols, $padtop: 0, $padside: $defaultpad ) {

	$itemwidth: ( 100% / $totalcols * $colspan );

	display:		inline-block;
	margin-right: 	-.275em; // Cancels out margin px issue with display:inline-block, may need to adjust based on body font;
	vertical-align: $align;
	width: 			$itemwidth;
	padding: 		$padtop $padside;

	@if $colspan > $totalcols { // Prevent weird broken values

		width:100%;
	}
		
}

/* 	PINK ROW
* 	Sass Row Item Generator
*
*	$rowitems:		Number of items per row ( ex. 4 ), used with $autorow. 						Defaults to 1
*	$skipitems:		For alternating row layouts, # of items to skip in nth-of-type calc			Defaults to 0
*
*/


@mixin pinkrow( $rowitems: 1, $skipitems: 0 ) {

	$rowtotal: $rowitems + $skipitems;

	@if $rowitems <=1 { // Prevent weird broken values
		padding-left: 0;
		padding-right: 0;
	}

	@else { //

		&:nth-of-type( #{$rowtotal}n+1 ){
			padding-left:0;
		}

		&:nth-of-type( #{$rowtotal}n+#{$rowitems} ){
			padding-right:0;
		}

	}

}